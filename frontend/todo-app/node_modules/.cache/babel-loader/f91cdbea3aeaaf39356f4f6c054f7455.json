{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Ye Wyn\\\\Downloads\\\\insertteamnamehere\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Ye Wyn\\\\Downloads\\\\insertteamnamehere\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Ye Wyn\\\\Downloads\\\\insertteamnamehere\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Ye Wyn\\\\Downloads\\\\insertteamnamehere\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Ye Wyn\\\\Downloads\\\\insertteamnamehere\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Ye Wyn\\\\Downloads\\\\insertteamnamehere\\\\frontend\\\\todo-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ye Wyn\\\\Downloads\\\\insertteamnamehere\\\\frontend\\\\todo-app\\\\src\\\\components\\\\todo\\\\EventPlannerComponent.jsx\";\nimport React, { Component } from 'react';\nimport EventDataService from '../../api/todo/EventDataService.js';\nimport AuthenticationService from './AuthenticationService.js';\nimport moment from 'moment';\n\nvar EventPlanner =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EventPlanner, _Component);\n\n  function EventPlanner(props) {\n    var _this;\n\n    _classCallCheck(this, EventPlanner);\n\n    console.log('constructor');\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EventPlanner).call(this, props));\n    _this.state = {\n      events: []\n    };\n    _this.refreshTodos = _this.refreshTodos.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(EventPlanner, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log('componentWillUnmount');\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      console.log('shouldComponentUpdate');\n      console.log(nextProps);\n      console.log(nextState);\n      return true;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log('componentDidMount');\n      this.refreshTodos();\n      console.log(this.state);\n    }\n  }, {\n    key: \"refreshTodos\",\n    value: function refreshTodos() {\n      var _this2 = this;\n\n      var username = AuthenticationService.getLoggedInUserName();\n      EventDataService.retrieveAllEvents(username).then(function (response) {\n        //console.log(response);\n        _this2.setState({\n          events: response.data\n        });\n      });\n    } // deleteTodoClicked(id)\n    // {\n    //     let username = AuthenticationService.getLoggedInUserName()\n    //     //console.log(id + \" \" + username);\n    //     EventDataService.deleteTodo(EvretrieveAllEventsame, id)\n    //         .then(\n    //             response =>\n    //             {\n    //                 this.setState({ message: `Delete of events ${id} Successful` })\n    //                 this.refreshTodos()\n    //             }\n    //         )\n    // }\n\n  }, {\n    key: \"addTodoClicked\",\n    value: function addTodoClicked() {\n      this.props.history.push(\"/eventss/-1\");\n    }\n  }, {\n    key: \"updateTodoClicked\",\n    value: function updateTodoClicked(id) {\n      console.log('update ' + id);\n      this.props.history.push(\"/eventss/\".concat(id)); // /eventss/${id}\n      // let username = AuthenticationService.getLoggedInUserName()\n      // //console.log(id + \" \" + username);\n      //     EventDataService.deleteTodo(EvretrieveAllEventsame, id)\n      //  .then (\n      //      response => {\n      //         this.setState({message : `Delete of events ${id} Successful`})\n      //         this.refreshTodos()\n      //      }\n      //  )\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      console.log('render');\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Event Planner\"), this.state.message && React.createElement(\"div\", {\n        class: \"alert alert-success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.state.message), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        className: \"table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"User Name\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Title\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Date\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Update\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Delete\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, this.state.events.map(function (events) {\n        return React.createElement(\"tr\", {\n          key: events.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, events.username), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, events.title), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, moment(events.targetDate).format('YYYY-MM-DD')), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn btn-success\",\n          onClick: function onClick() {\n            return _this3.updateTodoClicked(events.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, \"Update\")), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn btn-warning\",\n          onClick: function onClick() {\n            return _this3.deleteTodoClicked(events.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, \"Delete\")));\n      }))), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-success\",\n        onClick: this.addTodoClicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Add\"))));\n    }\n  }]);\n\n  return EventPlanner;\n}(Component);\n\nexport default EventPlanner;","map":{"version":3,"sources":["C:\\Users\\Ye Wyn\\Downloads\\insertteamnamehere\\frontend\\todo-app\\src\\components\\todo\\EventPlannerComponent.jsx"],"names":["React","Component","EventDataService","AuthenticationService","moment","EventPlanner","props","console","log","state","events","refreshTodos","bind","nextProps","nextState","username","getLoggedInUserName","retrieveAllEvents","then","response","setState","data","history","push","id","message","map","title","targetDate","format","updateTodoClicked","deleteTodoClicked","addTodoClicked"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport EventDataService from '../../api/todo/EventDataService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\nimport moment from 'moment'\r\n\r\nclass EventPlanner extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            events: [],\r\n        }\r\n        this.refreshTodos = this.refreshTodos.bind(this)\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        console.log('componentWillUnmount')\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState)\r\n    {\r\n        console.log('shouldComponentUpdate')\r\n        console.log(nextProps)\r\n        console.log(nextState)\r\n        return true\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        console.log('componentDidMount')\r\n        this.refreshTodos();\r\n        console.log(this.state)\r\n    }\r\n\r\n    refreshTodos()\r\n    {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        EventDataService.retrieveAllEvents(username)\r\n            .then(\r\n                response =>\r\n                {\r\n                    //console.log(response);\r\n                    this.setState({ events: response.data })\r\n                }\r\n            )\r\n    }\r\n\r\n    // deleteTodoClicked(id)\r\n    // {\r\n    //     let username = AuthenticationService.getLoggedInUserName()\r\n    //     //console.log(id + \" \" + username);\r\n    //     EventDataService.deleteTodo(EvretrieveAllEventsame, id)\r\n    //         .then(\r\n    //             response =>\r\n    //             {\r\n    //                 this.setState({ message: `Delete of events ${id} Successful` })\r\n    //                 this.refreshTodos()\r\n    //             }\r\n    //         )\r\n\r\n    // }\r\n\r\n    addTodoClicked()\r\n    {\r\n        this.props.history.push(`/eventss/-1`)\r\n    }\r\n\r\n    updateTodoClicked(id)\r\n    {\r\n        console.log('update ' + id)\r\n        this.props.history.push(`/eventss/${id}`)\r\n        // /eventss/${id}\r\n        // let username = AuthenticationService.getLoggedInUserName()\r\n        // //console.log(id + \" \" + username);\r\n        //     EventDataService.deleteTodo(EvretrieveAllEventsame, id)\r\n        //  .then (\r\n        //      response => {\r\n        //         this.setState({message : `Delete of events ${id} Successful`})\r\n        //         this.refreshTodos()\r\n        //      }\r\n        //  )\r\n\r\n    }\r\n\r\n    render()\r\n    {\r\n        console.log('render')\r\n        return (\r\n            <div>\r\n                <h1>Event Planner</h1>\r\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\r\n                <div className=\"container\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>User Name</th>\r\n                                <th>Title</th>\r\n                                <th>Date</th>\r\n                                <th>Update</th>\r\n                                <th>Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.events.map(\r\n                                    events =>\r\n                                        <tr key={events.id}>\r\n                                            <td>{events.username}</td>\r\n                                            <td>{events.title}</td>\r\n                                            <td>{moment(events.targetDate).format('YYYY-MM-DD')}</td>\r\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateTodoClicked(events.id)}>Update</button></td>\r\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteTodoClicked(events.id)}>Delete</button></td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"row\">\r\n                        <button className=\"btn btn-success\" onClick={this.addTodoClicked}>Add</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EventPlanner"]},"metadata":{},"sourceType":"module"}